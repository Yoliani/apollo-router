schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  HASHTAG @join__graph(name: "hashtag", url: "http://localhost:8083")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: HASHTAG)
{
  createPostReaction(postId: ID!, reactionId: Int!): Boolean!
  updatePostReaction(postId: ID!, reactionId: Int!): Boolean!
  deletePostReaction(postId: ID!): Boolean!
}

type PostReactionOutput
  @join__type(graph: HASHTAG)
{
  userId: ID!
  reactionId: Int!
  profile: SimpleProfile!
}

type PostReactionPagedQuery
  @join__type(graph: HASHTAG)
{
  results: [PostReactionOutput!]!
  cursor: String
}

type Query
  @join__type(graph: HASHTAG)
{
  getPostReactions(postId: ID!, reactionId: Int, page: String): PostReactionPagedQuery!
  hasLikeOnPost(postId: ID!, userId: ID): Boolean!
}

type SimpleProfile
  @join__type(graph: HASHTAG, key: "id")
{
  id: ID!
}